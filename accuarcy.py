#from predict_speech_file import get_output, ASRT

truelist = ["勇往直前","挑拨离间","狼狈为奸","拔苗助长",
            "息息相关","诗情画意","鸟语花香","哀鸿遍野",
            "好吃懒做","乐不思蜀","虎落平川","画饼充饥",
            "灰飞烟灭","莫名其妙","模棱两可","牵肠挂肚",
            "千变万化","入木三分","设身处地","百折不挠",
            "甘败下风","鳏寡孤独","阿谀奉承","哀声叹气",
            "安分守己","安居乐业","黯然失色","三更半夜",
            "马到成功","大显身手","不省人事","桀骜不驯",
            "不义之财","浑身解数","货真价实","饥不择食",
            "岌岌可危","几次三番","嫁祸于人","江东父老",
            "八仙过海","拔山盖世","白发红颜","卑躬屈膝",
            "悲欢离合","兵不血刃","兵荒马乱","秉烛夜游",
            "不速之客","寸草不生","管中窥豹","退避三舍",
            "瓜田李下","遮天蔽日","大打出手","大刀阔斧",
            "大错特错","重蹈覆辙","道貌岸然","丢盔卸甲",
            "感同身受",'语重心长','不以为然','气急败坏',
            '天涯海角','叹为观止',"惊心动魄","喜出望外",
            "小心翼翼","莫名其妙","耐人寻味","微不足道",
            "海市蜃楼","锲而不舍","流连忘返","滥竽充数",
            "秀色可餐","油然而生","望尘莫及","百发百中",
            "恍然大悟","健步如飞","见多识广","大智若愚",
            "南辕北辙","承上启下","荣华富贵","不折不扣",
            "奋不顾身","弃暗投明","引狼入室","势如破竹",
            "度日如年","心急如焚","风驰电掣","刀山火海",
            "视死如归","巧舌如簧","怒发冲冠","小题大做"]


prelist = ['勇往直前', '挑拨离间', '狼狈为奸', '拔苗助长',
           '息息相关', '诗情画意', '鸟语花香', '哀鸿遍野',
           '好吃懒做', '目不苟视', '虎落平川', '画饼充饥',
           '灰飞烟灭', '目空一切', '模棱两可', '狼号鬼哭',
           '千变万化', '入木三分', '设身处地', '百折不挠',
           '甘败下风', '鳏寡孤独', '阿谀奉承', '哀声叹气',
           '安分守己', '安居乐业', '社威擅势', '三更半夜',
           '马到成功', '大显身手', '不省人事', '桀骜不驯',
           '不义之财', '浑身解数', '货真价实', '饥不择食',
           '岌岌可危', '一举三反', '嫁祸于人', '江东父老',
           '八仙过海', '拔山盖世', '白发红颜', '卑躬屈膝',
           '悲欢离合', '兵不血刃', '兵荒马乱', '秉烛夜游',
           '不速之客', '寸草不生', '管中窥豹', '退避三舍',
           '瓜田李下', '遮天蔽日', '大打出手', '大刀阔斧',
           '大错特错', '重蹈覆辙', '道貌岸然', '丢盔卸甲',
           '感同身受', '语重心长', '喜溢眉梢', '气急败坏',
           '天涯海角', '叹为观止', '惊心夺目', '意出望外',
           '标新竞异', '莫名其妙', '耐人寻味', '微不足道',
           '海市蜃楼', '锲而不舍', '流连忘返', '滥竽充数',
           '秀色可餐', '油然而生', '望尘莫及', '百发百中',
           '恍然大悟', '健步如飞', '见多识广', '大智若愚',
           '南辕北辙', '承上启下', '荣华富贵', '不折不扣',
           '奋不顾身', '弃暗投明', '引狼入室', '势如破竹',
           '度日如年', '心急如焚', '风驰电赴', '刀山火海',
           '直认不讳', '巧舌如簧', '怒发冲冠', '小题大作']


ASRTlist = ['勇往直前', '调拨离间', '老备维艰', '把名驻场',
            '栖息相关', '拾起话一', '拟与华香', '哀洪毕以',
            '好吃来做', '慕不好数', '和落平川', '放比同级',
            '茴非面', '鸣其有', '没能两可', '天好过不',
            '千变万化', '木三分', '兽什出第', '白作不老',
            '甘伯吓皇', '关广孤独', '额与放从', '哀胜看去',
            '而分手给', '氨酯乐业', '二你啥时设', '芳高办业',
            '马到朝宫', '爆现生手', '埠市人士', '解奥不逊',
            '簿一吃才', '回身解数', '或真假时', '亟不择时',
            '题即可谓', '依次三番', '窖和与人', '东公父老',
            '巴先过海', '华商概是', '白发红颜', '北工区西',
            '拟欢理和', '并不是任', '盟皇马乱', '并主页游',
            '簿复指可', '春草部生', '犷中窥豹', '退避三首',
            '括田里下', '昨天蔽日', '大打出手', '打高扩服',
            '好错特错', '重蹈覆辙', '到茂二然', '留亏谢甲',
            '本同身受', '雨中心长', '绘以每然', '气急败坏',
            '天涯海讲', '放位观致', '禁心动不', '一处王外',
            '晓菁一', '莫名企妙', '娜仁询为', '胃不属倒',
            '海市顺楼', '请而不守', '流连忘返', '乱与充诉',
            '秀色可穿', '有然而生', '望尘莫及', '百发北中',
            '广然导物', '槛不如飞', '卷多实果', '大知落于',
            '哪辕北辙', '呈上起下', '从华赴贵', '不折不控',
            '奋不顾生', '似案头名', '因狼入市', '是如破主',
            '布日如年', '新题如分', '风池电处', '煲汤和海',
            '是很不规', '调时如黄', '陆发冲冠', '小提大作']




"""
for i in range(51,101):
    cy, mean, oldres= get_output(i)
    prelist.append(cy)

    oldres = ASRT(i)
    ASRTlist.append(oldres)


print(ASRTlist)
print(prelist)



ASRTac = set(truelist).intersection(set(ASRTlist))
print("ASRT原测试准确率："+str(len(ASRTac) / 100))

ac = set(truelist).intersection(set(prelist))
print("sql查询测试准确率："+str(len(ac) / 100))
"""

new_list = []
new_prelist = []
new_Alist = []
acplist = []
acAlist = []
for i in range(0,100):
    new_list.append(truelist[i])
    new_prelist.append(prelist[i])
    new_Alist.append(ASRTlist[i])
    if i%10 == 9 and i != 0:
        #print(new_prelist)
        ac = set(new_list).intersection(set(new_prelist))
        acplist.append(len(ac) / 100)
        acA = set(new_list).intersection(set(new_Alist))
        acAlist.append(len(acA) / 100)
print(acplist)
print(acAlist)